<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>搭建ELK日志分析平台</title>
    <link href="/2021/09/08/ELK/"/>
    <url>/2021/09/08/ELK/</url>
    
    <content type="html"><![CDATA[<p>使用资料</p><blockquote><ul><li>开源项目 <a href="https://github.com/deviantony/docker-elk.git">https://github.com/deviantony/docker-elk.git</a></li></ul></blockquote><p>目标主机设定</p><blockquote><ul><li>Docker Engine版本17.05+</li><li>Docker Compose版本1.12.0+</li><li>1.5 GB的RAM</li></ul></blockquote><p>默认端口号</p><blockquote><ul><li>5000: Logstash TCP input</li><li>9200: Elasticsearch HTTP</li><li>9300: Elasticsearch TCP transport</li><li>5601: Kibana</li></ul></blockquote><h3 id="一、安装-Docker-Engine"><a href="#一、安装-Docker-Engine" class="headerlink" title="一、安装 Docker Engine"></a>一、安装 Docker Engine</h3><p>因为我服务器没有docker engine，所以我要先安装docker engine</p><h4 id="1-设置仓库"><a href="#1-设置仓库" class="headerlink" title="1.设置仓库"></a>1.设置仓库</h4><p>使用 Docker 仓库进行安装<br>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p><p>安装所需的软件包</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell">$ sudo yum install -y yum-utils \<br>  device-mapper-persistent-<span class="hljs-class"><span class="hljs-keyword">data</span> \</span><br>  lvm2<br></code></pre></td></tr></table></figure><p>使用以下命令来设置稳定的仓库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo yum-config-manager \<br>    --add-repo \<br>    https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h4 id="2-安装-Docker-Engine-Community"><a href="#2-安装-Docker-Engine-Community" class="headerlink" title="2.安装 Docker Engine-Community"></a>2.安装 Docker Engine-Community</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ sudo yum install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io<br></code></pre></td></tr></table></figure><p>安装特定版本的 Docker Engine-Community，在存储库中列出可用版本：<br> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"> $ yum <span class="hljs-keyword">list</span> docker-<span class="hljs-keyword">ce</span> --showduplicates | <span class="hljs-keyword">sort</span> -r<br> <br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">3</span>:<span class="hljs-number">18.09</span>.<span class="hljs-number">1</span>-<span class="hljs-number">3</span>.el7                     docker-<span class="hljs-keyword">ce</span>-stable<br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">3</span>:<span class="hljs-number">18.09</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el7                     docker-<span class="hljs-keyword">ce</span>-stable<br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">18.06</span>.<span class="hljs-number">1</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">3</span>.el7                    docker-<span class="hljs-keyword">ce</span>-stable<br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">18.06</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">3</span>.el7                    docker-<span class="hljs-keyword">ce</span>-stable<br></code></pre></td></tr></table></figure><br> 通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：docker-ce-18.09.1。<br> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ sudo yum install docker-<span class="hljs-keyword">ce</span>-<span class="hljs-symbol">&lt;VERSION_STRING&gt;</span> docker-<span class="hljs-keyword">ce</span>-cli-<span class="hljs-symbol">&lt;VERSION_STRING&gt;</span> containerd.io<br></code></pre></td></tr></table></figure></p><h4 id="3-启动-Docker。"><a href="#3-启动-Docker。" class="headerlink" title="3.启动 Docker。"></a>3.启动 Docker。</h4> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> sudo systemctl <span class="hljs-built_in">start</span> docker<br></code></pre></td></tr></table></figure><h4 id="4-安装依赖："><a href="#4-安装依赖：" class="headerlink" title="4.安装依赖："></a>4.安装依赖：</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ yum <span class="hljs-keyword">install</span> libseccomp-devel<br></code></pre></td></tr></table></figure><h4 id="5-运行docker-hello-world-测试安装结果"><a href="#5-运行docker-hello-world-测试安装结果" class="headerlink" title="5.运行docker hello-world 测试安装结果"></a>5.运行docker hello-world 测试安装结果</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo docker <span class="hljs-builtin-name">run</span> hello-world<br></code></pre></td></tr></table></figure><h3 id="二、安装Docker-Compose"><a href="#二、安装Docker-Compose" class="headerlink" title="二、安装Docker Compose"></a>二、安装Docker Compose</h3><p>因为我服务器没有docker compose，所以我要先安装docker compose</p><h4 id="1-下载-Docker-Compose-的当前稳定版本"><a href="#1-下载-Docker-Compose-的当前稳定版本" class="headerlink" title="1.下载 Docker Compose 的当前稳定版本"></a>1.下载 Docker Compose 的当前稳定版本</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><h4 id="2-将可执行权限应用于二进制文件"><a href="#2-将可执行权限应用于二进制文件" class="headerlink" title="2.将可执行权限应用于二进制文件"></a>2.将可执行权限应用于二进制文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><h4 id="3-创建软链："><a href="#3-创建软链：" class="headerlink" title="3.创建软链："></a>3.创建软链：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose <span class="hljs-regexp">/usr/</span>bin/docker-compose<br></code></pre></td></tr></table></figure><h4 id="4-测试是否安装成功："><a href="#4-测试是否安装成功：" class="headerlink" title="4.测试是否安装成功："></a>4.测试是否安装成功：</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ docker-compose <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><blockquote><p>遇到问题，原因，解决方案</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">a.报错：运行docker-compose --version出现：<br><br>Cannot open self <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose or archive <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose.pkg<br><br><br>b.原因：使用官方文档中所描述的方法：<br><br>curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.14.0-rc2/</span>docker-compose-`uname -s`-`uname -m` <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br>chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br>安装时，curl下载下来的文件是不完整的<br><br>c.解决方法：<br><br>手动下载：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.14.0-rc2/</span>docker-compose-Linux-x86_64<br>然后将文件上传到 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span> 文件夹下，然后将其重命名为docker-compose，修改此文件的权限，增加可执行：<br><br>chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br><br>然后再运行$ docker-compose --version 即可<br></code></pre></td></tr></table></figure><h3 id="三、安装Git"><a href="#三、安装Git" class="headerlink" title="三、安装Git"></a>三、安装Git</h3><p>因为我服务器没有git，所以我要先安装git</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> yum install <span class="hljs-built_in">curl</span><span class="hljs-literal">-devel</span> expat<span class="hljs-literal">-devel</span> gettext<span class="hljs-literal">-devel</span> \<br>  openssl<span class="hljs-literal">-devel</span> zlib<span class="hljs-literal">-devel</span><br><br><span class="hljs-variable">$</span> yum <span class="hljs-literal">-y</span> install git<span class="hljs-literal">-core</span><br><br><span class="hljs-variable">$</span> git -<span class="hljs-literal">-version</span><br></code></pre></td></tr></table></figure><h3 id="四、用Docker上安装ELK"><a href="#四、用Docker上安装ELK" class="headerlink" title="四、用Docker上安装ELK"></a>四、用Docker上安装ELK</h3><h4 id="1-创建一个目录"><a href="#1-创建一个目录" class="headerlink" title="1.创建一个目录"></a>1.创建一个目录</h4><p>个人习惯，随意</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir elk<br></code></pre></td></tr></table></figure><h4 id="2-git命令拉取部署elk所需资料"><a href="#2-git命令拉取部署elk所需资料" class="headerlink" title="2.git命令拉取部署elk所需资料"></a>2.git命令拉取部署elk所需资料</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/deviantony/</span>docker-elk.git<br></code></pre></td></tr></table></figure><h4 id="3-进入刚下载的文件夹内"><a href="#3-进入刚下载的文件夹内" class="headerlink" title="3.进入刚下载的文件夹内"></a>3.进入刚下载的文件夹内</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> docker<span class="hljs-literal">-elk</span><br></code></pre></td></tr></table></figure><h4 id="4-通过docker-compose创建并启动容器"><a href="#4-通过docker-compose创建并启动容器" class="headerlink" title="4.通过docker-compose创建并启动容器"></a>4.通过docker-compose创建并启动容器</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>docker-compose up -d<br></code></pre></td></tr></table></figure><h4 id="5-通过docker-ps可以看到logstash、elasticsearch、kibana容器已经创建并且启动。"><a href="#5-通过docker-ps可以看到logstash、elasticsearch、kibana容器已经创建并且启动。" class="headerlink" title="5.通过docker ps可以看到logstash、elasticsearch、kibana容器已经创建并且启动。"></a>5.通过docker ps可以看到logstash、elasticsearch、kibana容器已经创建并且启动。</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span><br></code></pre></td></tr></table></figure><h4 id="6-关于elasticsearch、logstash、kibana的配置都在对应目录下的config文件夹中的-yml文件中"><a href="#6-关于elasticsearch、logstash、kibana的配置都在对应目录下的config文件夹中的-yml文件中" class="headerlink" title="6.关于elasticsearch、logstash、kibana的配置都在对应目录下的config文件夹中的.yml文件中"></a>6.关于elasticsearch、logstash、kibana的配置都在对应目录下的config文件夹中的.yml文件中</h4>]]></content>
    
    
    
    <tags>
      
      <tag>开源</tag>
      
      <tag>后端</tag>
      
      <tag>ELK</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Alibaba Cloud Toolkit使用IntelliJ IDEA部署应用到Win服务器</title>
    <link href="/2021/08/17/article-init/"/>
    <url>/2021/08/17/article-init/</url>
    
    <content type="html"><![CDATA[<h3 id="安装需要的工具"><a href="#安装需要的工具" class="headerlink" title="安装需要的工具"></a>安装需要的工具</h3><p>部署linux服务器按照官方文档即可 <a href="https://help.aliyun.com/document_detail/98763.html">https://help.aliyun.com/document_detail/98763.html</a></p><p>教程是win服务器操作</p><h3 id="1-window服务器上安装OpenSSH"><a href="#1-window服务器上安装OpenSSH" class="headerlink" title="1.window服务器上安装OpenSSH"></a>1.window服务器上安装OpenSSH</h3><p><a href="https://github.com/PowerShell/Win32-OpenSSH/releases">https://github.com/PowerShell/Win32-OpenSSH/releases</a></p><p>解压目录下执行官网的步骤</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//a.安装命令</span><br>powershell.exe -ExecutionPolicy Bypass -<span class="hljs-built_in">File</span> install-sshd.ps1<br><br><span class="hljs-comment">//b.设置为自启动模式</span><br>sc config sshd start= <span class="hljs-keyword">auto</span><br><br><span class="hljs-comment">//c.启动服务</span><br>net start sshd<br></code></pre></td></tr></table></figure><h3 id="2-安装插件Alibaba-Cloud-Toolkit-配置"><a href="#2-安装插件Alibaba-Cloud-Toolkit-配置" class="headerlink" title="2.安装插件Alibaba Cloud Toolkit 配置"></a>2.安装插件Alibaba Cloud Toolkit 配置</h3><p>run.bat 脚本 项目端口-需替换，包名-需替换</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros">@echo off &amp; setlocal EnableDelayedExpansion<br> <br><span class="hljs-builtin-name">set</span> obj[0]=项目端口-需替换<br> <br> <br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">port</span>=0<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">pid</span>=0<br> <br><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;usebackq delims== tokens=1-2&quot;</span> %%a <span class="hljs-keyword">in</span> (`<span class="hljs-builtin-name">set</span> obj`) <span class="hljs-keyword">do</span> (<br>    <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">port</span>=%%b<br>    <span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;tokens=5&quot;</span> %%m <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;netstat -aon ^| findstr &quot;:%%b&quot;&#x27;</span>) <span class="hljs-keyword">do</span> (<br>        <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">pid</span>=%%m<br>    )<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;!pid!&quot;</span>==<span class="hljs-string">&quot;0&quot;</span> (<br>        echo 端口号【!port!】没有占用<br>    ) <span class="hljs-keyword">else</span> (<br>        echo 端口号【!port!】相关进程以杀死<br>        taskkill /f /pid !pid!<br>    )<br>    <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">pid</span>=0<br>)<br> <br>java -jar -Xms1024m -Xmx1536m -XX:<span class="hljs-attribute">PermSize</span>=128M -XX:<span class="hljs-attribute">MaxPermSize</span>=256M 包名-需替换.jar &amp;<br> <br>pause<br></code></pre></td></tr></table></figure><h3 id="3-执行注意事项"><a href="#3-执行注意事项" class="headerlink" title="3.执行注意事项"></a>3.执行注意事项</h3><p>问题：多模块工程打包出现找不到符号的问题<br>原因：聚合工程下的子工程必须依次执行 clean install，再具体模块package<br>解决：父模块clean install，具体子模块package</p><h3 id="4-操作截图…"><a href="#4-操作截图…" class="headerlink" title="4.操作截图…"></a>4.操作截图…</h3><p><img src="https://uss.ilovey.live/img/act/img1.png"><br><img src="https://uss.ilovey.live/img/act/img2.png"><br><img src="https://uss.ilovey.live/img/act/img3.png"><br><img src="https://uss.ilovey.live/img/act/img4.png"><br><img src="https://uss.ilovey.live/img/act/img5.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开源</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/08/05/hello-world/"/>
    <url>/2021/08/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>开源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🎨 Java 学习笔记</title>
    <link href="/2018/08/17/old-context/"/>
    <url>/2018/08/17/old-context/</url>
    
    <content type="html"><![CDATA[<p>🎨 Java 学习笔记</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ul><li><a href="https://github.com/java-aodeng/JavaGuide/blob/master/README.md">网上看到写得好的文章收集</a></li></ul><h3 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h3><ul><li><a href="https://gitbook.cn/gitchat/activity/5daac87dd39d6a72d183b52c?utm_source=weixinNotification">CI/CD流程以及原理说明</a></li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/design-pattern/design-pattern1">策略模式</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/design-pattern/design-pattern2">单例模式</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/design-pattern/design-pattern3">工厂模式</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/design-pattern/design-pattern4/learn/DecoratorMode.md">装饰器模式</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/design-pattern/design-pattern5/src/1.md">观察者模式</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/design-pattern/20190717/src/1.md">适配器模式</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/design-pattern/20190718/src/1.md">模板方法模式</a></li></ul><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><ul><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot1-public-pom">SpringBoot(1)：公共配置</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot2-generator">SpringBoot(2)：generator</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot3-docker">SpringBoot(3)：docker部署项目</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot4-file-upload">SpringBoot(4)：单一，base64文件上传</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot5-mapper-pagehelper">SpringBoot(5)：通用mapper，分页插件</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot6-redis-session">SpringBoot(6)：redis缓存数据，session</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot7-timed-task">SpringBoot(7)：定时任务</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot8-date-format">SpringBoot(8)：格式化日期</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot9-exception-manager">SpringBoot(9)：全局异常处理</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot10-email">SpringBoot(10)：JavaMailSender邮件服务</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot11-CommandLineRunner">SpringBoot(11)：CommandLineRunner-初始化资源</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot12-shiro-redis">SpringBoot(12)：redis保存session-shiro登录认证</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot13-starter-test">SpringBoot(13)：MockMVC-web单元测试</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot14-thymeleaf">SpringBoot(14)：Thymeleaf使用</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot15-quartz">SpringBoot(15)：集成 Quartz</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot16-rabbitmq">SpringBoot(16)：集成 rabbitmq</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot17-mybatis-plus">SpringBoot(17)：集成 mybatis-plus</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot18-jwt-shiro">SpringBoot(18)：整合jwt-shiro</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot19-redisson-distributed-locks">SpringBoot(19)：集成redisson实现分布式锁</a></li></ul><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><ul><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springcloud/micro-service1-eureka-server">SpringCloud(1)：服务注册中心server和服务客户端client</a> / <a href="https://github.com/java-aodeng/hope/tree/master/docs/micro-service1-eureka-client">Eureka client代码</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springcloud/micro-service2-eureka-provider">SpringCloud(2)：服务提供者provider</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springcloud/micro-service3-eureka-ribbon">SpringCloud(3)：服务消费者ribbon</a></li><li><a href="https://aodeng.cc/archives/khdfzjhs">SpringCloud(4)：客户端负载均衡</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springcloud/micro-service5-feign">SpringCloud(5)：服务消费者feign与Hystrix断路器容错机制</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springcloud/micro-service6-hystrixdashboard">SpringCloud(6)：Hystrix Dashboard熔断监控面板</a></li></ul><h3 id="服务器运维-工具安装配置"><a href="#服务器运维-工具安装配置" class="headerlink" title="服务器运维-工具安装配置"></a>服务器运维-工具安装配置</h3><ul><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/ubuntu/es.md">Ubuntu下Elasticsearch安装配置</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/ubuntu/Elasticsearch-kibana.md">Ubuntu下搭建Elasticsearch和kibana</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/good-code/%E7%93%A6%E5%8A%9Bwalle2.0-docker%E5%AE%89%E8%A3%85.md">瓦力walle2.0-docker安装</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/Avoid-pit-notes-2021/Yapi%20%E5%86%85%E7%BD%91%E9%83%A8%E7%BD%B2-%E9%81%BF%E5%9D%91.md">Yapi 内网部署-避坑</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/Avoid-pit-notes-2021/win10%E5%AE%89%E8%A3%85mysql-%E9%81%BF%E5%9D%91%E7%AC%94%E8%AE%B02021.md">win10安装mysql-避坑</a></li></ul><h3 id="服务器运维-常用命令、常见问题"><a href="#服务器运维-常用命令、常见问题" class="headerlink" title="服务器运维-常用命令、常见问题"></a>服务器运维-常用命令、常见问题</h3><ul><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.md">Linux常用命令</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/linux/dos2unix.md">dos2unix的使用:对文件进行转换</a></li></ul><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/nginx/nginx1.md">Java 程序员应掌握的 Nginx 实战应用（一）</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/nginx/nginx2.md">Java 程序员应掌握的 Nginx 实战应用（二）</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/git/git1.md">Git常用命令</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/mvn.md">Maven常用（一）</a></li></ul><h3 id="Java-code"><a href="#Java-code" class="headerlink" title="Java code"></a>Java code</h3><ul><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/java/java1.md">Java常用方法（一）</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/json/json1.md">Json返回结果为null属性不显示解决</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/ie/ieExcel1.md">设置ie导出Excel乱码问题</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/Annotation/annotation1.md">常用注解（一）</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/spring/spring1.md">Spring异步方法</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/good-code/%E5%A4%9A%E7%BA%A7%E8%8F%9C%E5%8D%95%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E6%88%90%E6%A0%91.md">多级菜单递归遍历成树</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/good-code/%E5%BE%AE%E4%BF%A1%E8%AE%A4%E8%AF%81.md">微信认证</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/good-code/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95.md">雪花算法</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
