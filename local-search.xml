<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go语言从入门到精通</title>
    <link href="/2022/04/02/golang-example/"/>
    <url>/2022/04/02/golang-example/</url>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>开源协议：GPL-3.0</p><p>作者：[<a href="https://github.com/java-aodeng">低调小熊猫</a>]</p><p>地址：<a href="https://github.com/java-aodeng/golang-examples">https://github.com/java-aodeng/golang-examples</a></p><p>意义：分享知识，提高自己</p><p>ps：白天上班，晚上更新，尽量日更，比心</p><h1><a href="https://github.com/java-aodeng/golang-examples">Go语言从入门到精通</a></h1><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-01/1.md">第01章 关于 Go 语言的介绍</a> </p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-02/1.md">第02章 变量，常量以及与其他语言的差异</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-03/1.md">第03章 数据类型</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-04/1.md">第04章 运算符</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-05/1.md">第05章 条件和循环</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-06/1.md">第06章 数组和切片</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-07/1.md">第07章 Map 声明、元素访问及遍历</a> </p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-08/map_ext_test.go">第08章 Map与工厂模式，在Go语言中实现Set</a> </p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-09/string_test.go">第09章 字符串</a> </p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-10-11/func_test.go">第10章 Go与语言的函数 第11章 可变参数和defer</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-12/encap_test.go">第12章 行为的定义和实现</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-13/interface_test.go">第13章 Go语言的相关接口</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-14/extension_test.go">第14章 扩展与复用</a> </p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-15/empty_interface_test.go">第15章 不一样的接口类型，一样的多态</a> </p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-16/err_test.go">第16章 编写好的错误处理</a> </p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-17/panic_recover_test.go">第17章 panic和recover</a> </p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-18/client/package_test.go">第18章 构建可复用的模块（包）</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/src/go-19/module_package/get_remote_pack_test.go">第19章 依赖管理</a> </p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-20/groutine_test.go">第20章 协程机制</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-21/share_mem_test.go">第21章 共享内存并发机制</a> </p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-22/async_service_test.go">第22章 CSP并发机制</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-23/select_test.go">第23章 多路由选择和超时</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-24/channel_close_test.go">第24章 channel的关闭和广播</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-25/cancel_test.go">第25章 任务的取消</a> </p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-26/cancel_by_context_test.go">第26章 Context与任务取消</a></p><p><a href="https://github.com/java-aodeng/golang-examples/blob/master/go-27/once_test.go">第27章 只运行一次</a></p><p>第28章 仅需任意任务完成 </p><p>第29章 所有任务完成 </p><p>第30章 对象池</p><p>第31章 sync.pool对象缓存</p><p>第32章 单元测试 </p><p>第33章 Benchmark</p><p>第34章 BDD </p><p>第35章 反射编程</p><p>第36章 万能程序</p><p>第37章 不安全编程</p><p>第38章 实现pipe-filter framework</p><p>第39章 实现micro-kernel framework</p><p>第40章 内置JSON解析 </p><p>第41章 easyjson</p><p>第42章 构建Restful </p><p>第43章 性能分析工具</p><p>第44章 性能调优示例</p><p>第45章 别让性能被锁住 </p><p>第46章 GC友好的代码</p><p>第47章 高效字符串连接</p><p>第48章 面向错误的设计 </p><p>第49章 面向恢复的设计</p><p>第50章 Chaos Engineering </p><p>结束 <a href="https://t.zsxq.com/qvvzZb2">星球链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Go</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud 2020版本最佳实践方案（一）</title>
    <link href="/2021/09/26/springcloud2020/"/>
    <url>/2021/09/26/springcloud2020/</url>
    
    <content type="html"><![CDATA[<h3 id="Spring-Cloud2020版本最佳实践方案（一）"><a href="#Spring-Cloud2020版本最佳实践方案（一）" class="headerlink" title="Spring Cloud2020版本最佳实践方案（一）"></a>Spring Cloud2020版本最佳实践方案（一）</h3><p>Spring Cloud 从H版本之后命名方式改为2020.x.x，话说为毛最新版本不是2021命名，来自强迫症的难受</p><h4 id="使用组件列表："><a href="#使用组件列表：" class="headerlink" title="使用组件列表："></a>使用组件列表：</h4><ul><li>注册中心：nacos，替代方案eureka、consul、zookeeper</li><li>配置中心: nacos ，替代方案sc config、consul config</li><li>调用:feign，替代方案：resttempate</li><li>熔断：sentinel、，替代方案：Resilience4j</li><li>熔断监控：sentinel dashboard</li><li>负载均衡:sc loadbalancer</li><li>网关：spring cloud gateway</li><li>链路：spring cloud sleuth+zipkin，替代方案：skywalking等</li></ul><h4 id="总体架构图"><a href="#总体架构图" class="headerlink" title="总体架构图"></a>总体架构图</h4><p><img src="https://uss.ilovey.live/img/posts/springcloud2020-%E6%9E%B6%E6%9E%84%E5%9B%BE.png"></p><h4 id="版本关系"><a href="#版本关系" class="headerlink" title="版本关系"></a>版本关系</h4><p><img src="https://uss.ilovey.live/img/posts/springcloud-version.png"></p><h3 id="使用nacos作为注册中心和配置中心"><a href="#使用nacos作为注册中心和配置中心" class="headerlink" title="使用nacos作为注册中心和配置中心"></a>使用nacos作为注册中心和配置中心</h3><h4 id="下载nacos"><a href="#下载nacos" class="headerlink" title="下载nacos"></a>下载nacos</h4><p>下载地址：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a> </p><h4 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h4><p>创建mysql数据库nacos，导入 conf/nacos-mysql.sql</p><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>修改 conf/application.properties</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#*************** Config Module Related Configurations ***************#</span><br><span class="hljs-comment">### If use MySQL as datasource:</span><br><span class="hljs-attr">spring.datasource.platform</span>=mysql<br><br><span class="hljs-comment">### Count of DB:</span><br><span class="hljs-attr">db.num</span>=<span class="hljs-number">1</span><br><br><span class="hljs-comment">### Connect URL of DB:</span><br><span class="hljs-attr">db.url.0</span>=jdbc:mysql://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3306</span>/nacos?characterEncoding=utf8&amp;connectTimeout=<span class="hljs-number">1000</span>&amp;socketTimeout=<span class="hljs-number">3000</span>&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC<br><span class="hljs-attr">db.user.0</span>=root<br><span class="hljs-attr">db.password.0</span>=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h4 id="配置启动模式"><a href="#配置启动模式" class="headerlink" title="配置启动模式"></a>配置启动模式</h4><p>将nacos设为单机模式启动，编辑 bin/startup.cmd 将MODE<br>修改为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">MODE</span>=<span class="hljs-string">&quot;standalone&quot;</span><br></code></pre></td></tr></table></figure><h4 id="启动运行"><a href="#启动运行" class="headerlink" title="启动运行"></a>启动运行</h4><p>登陆页面：<a href="http://localhost:8848/nacos/%EF%BC%8C%E7%99%BB%E9%99%86%E7%94%A8%E6%88%B7nacos%EF%BC%8C%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E4%B8%BAnacos">http://localhost:8848/nacos/，登陆用户nacos，登陆密码为nacos</a></p><h4 id="工程案例"><a href="#工程案例" class="headerlink" title="工程案例"></a>工程案例</h4><p>工程案例源码：<a href="https://github.com/java-aodeng/springcloud2020-demo-1">https://github.com/java-aodeng/springcloud2020-demo-1</a></p><blockquote><p>工程案例包括2个，一个服务提供者provider 、服务消费者consumer</p></blockquote><p>在父pom文件引入相关的依赖，如下：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span>2.4.4<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot.version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>2020.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span>2021.1<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- spring boot 依赖 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring-boot.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- spring cloud 依赖 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring-cloud.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- spring cloud alibaba 依赖 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring-cloud-alibaba.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="服务提供者provider"><a href="#服务提供者provider" class="headerlink" title="服务提供者provider"></a>服务提供者provider</h4><p>在pom文件引入以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8762</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">provider</span><br><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br></code></pre></td></tr></table></figure><p>启动入口添加注解：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableDiscoveryClient</span><br>public class ProviderApplication &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(ProviderApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写个接口：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoController</span> </span>&#123;<br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;server.port&#125;&quot;</span>)<br>    <span class="hljs-built_in">String</span> port;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;getInfo&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getInfo</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span>(value = <span class="hljs-string">&quot;name&quot;</span>,defaultValue = <span class="hljs-string">&quot;nacosConfig&quot;</span>,required = <span class="hljs-literal">false</span>)<span class="hljs-built_in">String</span> name</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;my name is &quot;</span>+name+<span class="hljs-string">&quot;,my port is &quot;</span>+port;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="服务消费者consumer"><a href="#服务消费者consumer" class="headerlink" title="服务消费者consumer"></a>服务消费者consumer</h4><p>在pom文件引入以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--引入openfeign，必须要引入loadbalancer，否则无法启动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8763</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">consumer</span><br><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br></code></pre></td></tr></table></figure><p>在工程的启动入口开启FeignClient的功能</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableDiscoveryClient</span><br><span class="hljs-variable">@EnableFeignClients</span><br>public class ConsumerApplication &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(ConsumerApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写一个FeignClient，去调用provider服务的接口：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@FeignClient</span>(value = <span class="hljs-string">&quot;provider&quot;</span>)<br>public interface ProviderClient &#123;<br><br>    <span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;getInfo&quot;</span>)<br>    String getInfo(<span class="hljs-variable">@RequestParam</span>(value = <span class="hljs-string">&quot;name&quot;</span>,defaultValue = <span class="hljs-string">&quot;nacosConfig&quot;</span>,required = false)String name);<br>&#125;<br></code></pre></td></tr></table></figure><p>写一个接口，让consumer去调用provider服务的接口：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    ProviderClient providerClient;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;getInfoByFeign&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getInfoByFeign</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> providerClient.getInfo(<span class="hljs-string">&quot;consumer feign&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动两个工程，在nacos服务列表页面出现，consumer，provider2个服务表示都已经注册成功</p><h4 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h4><p>在浏览器上输入<a href="http://localhost:8763/getInfoByFeign%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94">http://localhost:8763/getInfoByFeign，浏览器返回响应</a></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">my</span> <span class="hljs-built_in">name</span> <span class="hljs-keyword">is</span> consumer feign,<span class="hljs-keyword">my</span> port <span class="hljs-keyword">is</span> <span class="hljs-number">8761</span><br></code></pre></td></tr></table></figure><p>可见浏览器的请求成功调用了consumer服务的接口，consumer服务也成功地通过feign成功的调用了provider服务的接口。</p><h4 id="使用sc-loadbanlancer作为负载均衡"><a href="#使用sc-loadbanlancer作为负载均衡" class="headerlink" title="使用sc loadbanlancer作为负载均衡"></a>使用sc loadbanlancer作为负载均衡</h4><p>使用spring cloud loadbanlancer作为负载均衡器。 通过修改provider的端口，再在本地启动一个新的provider服务，那么本地有2个provider 服务，端口分别为8761 和8762。在浏览器上多次调用<a href="http://localhost:8763/getInfoByFeign%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E4%BA%A4%E6%9B%BF%E6%98%BE%E7%A4%BA%EF%BC%9A">http://localhost:8763/getInfoByFeign，浏览器会交替显示：</a></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">my</span> <span class="hljs-built_in">name</span> <span class="hljs-keyword">is</span> consumer feign,<span class="hljs-keyword">my</span> port <span class="hljs-keyword">is</span> <span class="hljs-number">8761</span><br><span class="hljs-keyword">my</span> <span class="hljs-built_in">name</span> <span class="hljs-keyword">is</span> consumer feign,<span class="hljs-keyword">my</span> port <span class="hljs-keyword">is</span> <span class="hljs-number">8762</span><br></code></pre></td></tr></table></figure><p>注册中心provider服务也会显示两个示例</p><h4 id="使用nacos作为配置中心"><a href="#使用nacos作为配置中心" class="headerlink" title="使用nacos作为配置中心"></a>使用nacos作为配置中心</h4><p>父工程添加nacos配置版本，另一个是用来解决最新版本导致的问题：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">alibaba.nacos.version</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">alibaba.nacos.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.bootstrap.version</span>&gt;</span>3.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.bootstrap.version</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">     <span class="hljs-comment">&lt;!--Alibaba Nacos 配置--&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring-cloud-alibaba.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--引入这个依赖解决SpringCloud2020整合Nacos-Bootstrap配置不生效的问题--&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring-cloud.bootstrap.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>服务提供者provider添加依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在bootstrap.yml(一定是bootstrap.yml文件，不是application.yml文件)文件配置以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8762</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">provider</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br>        <span class="hljs-attr">prefix:</span> <span class="hljs-string">provider</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><p>在上面的配置中，配置了nacos config server的地址，配置的扩展名是ymal（目前仅支持yml和properties）。注意是没有配置server.port的，sever.port的属性在nacos中配置。上面的配置是和Nacos中的dataId 的格式是对应的，nacos的完整格式如下：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span>&#123;prefix&#125;-<span class="hljs-symbol">$</span>&#123;spring.profile.active&#125;.<span class="hljs-symbol">$</span>&#123;<span class="hljs-keyword">file</span>-extension&#125;<br></code></pre></td></tr></table></figure><ul><li>prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。</li><li>spring.profile.active 即为当前环境对应的 profile，详情可以参考 Spring Boot文档。 注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}</li><li>file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。<br>启动nacos，登陆localhost:8848/nacos，创建一个data id ，完整的配置如图所示：</li></ul><p><img src="https://uss.ilovey.live/img/posts/nacos%E9%85%8D%E7%BD%AE.png"></p><h4 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h4><p><a href="https://github.com/java-aodeng/springcloud2020-demo-1">https://github.com/java-aodeng/springcloud2020-demo-1</a></p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="https://www.fangzhipeng.com/spring-cloud.html">https://www.fangzhipeng.com/spring-cloud.html</a><br><a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a><br><a href="https://www.springcloud.cc/">https://www.springcloud.cc/</a><br><a href="https://blog.csdn.net/llllllllll4er5ty/article/details/104425284">https://blog.csdn.net/llllllllll4er5ty/article/details/104425284</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Springcloud</tag>
      
      <tag>Springboot</tag>
      
      <tag>nacos</tag>
      
      <tag>feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云原生微服务网关Kong和可视化工具Konga安装配置</title>
    <link href="/2021/09/24/kong/"/>
    <url>/2021/09/24/kong/</url>
    
    <content type="html"><![CDATA[<h3 id="Kong安装配置"><a href="#Kong安装配置" class="headerlink" title="Kong安装配置"></a>Kong安装配置</h3><h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><p>Kong或Kong API Gateway是一种云原生、平台无关、可扩展的 API 网关，以其高性能和插件可扩展性而著称。</p><p>通过为代理提供的功能，路由，负载平衡，健康检查，验证（和更多），孔用作用于编排微服务或常规API流量容易中心层。</p><p>开源地址：<br><a href="https://github.com/Kong/kong">https://github.com/Kong/kong</a><br><a href="https://github.com/pantsel/konga">https://github.com/pantsel/konga</a></p><h4 id="创建Docker-network-用于容器通讯"><a href="#创建Docker-network-用于容器通讯" class="headerlink" title="创建Docker network 用于容器通讯"></a>创建Docker network 用于容器通讯</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">docker network create kong-<span class="hljs-built_in">net</span><br></code></pre></td></tr></table></figure><h4 id="启动PostgreSQL数据库容器"><a href="#启动PostgreSQL数据库容器" class="headerlink" title="启动PostgreSQL数据库容器"></a>启动PostgreSQL数据库容器</h4><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">docker run -d --name kong-database \<br>               --network=kong-net \<br>               -p <span class="hljs-number">5432</span>:<span class="hljs-number">5432</span> \<br>               -e <span class="hljs-string">&quot;POSTGRES_USER=kong&quot;</span> \<br>               -e <span class="hljs-string">&quot;POSTGRES_DB=kong&quot;</span> \<br>               -e <span class="hljs-string">&quot;POSTGRES_PASSWORD=kong&quot;</span> \<br>               postgres:<span class="hljs-number">9</span>.<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h4 id="初始化kong数据库，使用临时-Kong-容器运行迁移"><a href="#初始化kong数据库，使用临时-Kong-容器运行迁移" class="headerlink" title="初始化kong数据库，使用临时 Kong 容器运行迁移"></a>初始化kong数据库，使用临时 Kong 容器运行迁移</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker run --rm <span class="hljs-string">\</span><br>     --network=kong-net <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_DATABASE=postgres&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_PG_HOST=kong-database&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_PG_USER=kong&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_PG_PASSWORD=kong&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span> <span class="hljs-string">\</span><br>     kong:latest kong migrations bootstrap<br></code></pre></td></tr></table></figure><h4 id="启动Kong"><a href="#启动Kong" class="headerlink" title="启动Kong"></a>启动Kong</h4><p>这里替换宿主机端口8000为8002，服务器端口被占用的解决方案<br>参数-p 0.0.0.0:8001:8001 是为了能外网访问8001端口</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker run -d --name kong <span class="hljs-string">\</span><br>     --network=kong-net <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_DATABASE=postgres&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_PG_HOST=kong-database&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_PG_USER=kong&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_PG_PASSWORD=kong&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span> <span class="hljs-string">\</span><br>     -e <span class="hljs-string">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot;</span> <span class="hljs-string">\</span><br>     -p <span class="hljs-number">8002</span>:<span class="hljs-number">8000</span> <span class="hljs-string">\</span><br>     -p <span class="hljs-number">8443</span>:<span class="hljs-number">8443</span> <span class="hljs-string">\</span><br>     -p <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">8001</span>:<span class="hljs-number">8001</span> <span class="hljs-string">\</span><br>     -p <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8444</span>:<span class="hljs-number">8444</span> <span class="hljs-string">\</span><br>     kong:latest<br></code></pre></td></tr></table></figure><h4 id="使用kong"><a href="#使用kong" class="headerlink" title="使用kong"></a>使用kong</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ curl -i http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8001</span>/<br></code></pre></td></tr></table></figure><h3 id="konga安装和配置"><a href="#konga安装和配置" class="headerlink" title="konga安装和配置"></a>konga安装和配置</h3><h4 id="初始化数据konga数据库，使用临时-Konga-容器运行迁移"><a href="#初始化数据konga数据库，使用临时-Konga-容器运行迁移" class="headerlink" title="初始化数据konga数据库，使用临时 Konga 容器运行迁移"></a>初始化数据konga数据库，使用临时 Konga 容器运行迁移</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker run --rm <span class="hljs-string">\</span><br>             --network=kong-net <span class="hljs-string">\</span><br>             pantsel/konga:latest <span class="hljs-string">\</span><br>             -c prepare <span class="hljs-string">\</span><br>             -a <span class="hljs-string">&quot;postgres&quot;</span> <span class="hljs-string">\</span><br>             -u <span class="hljs-string">&quot;postgres://kong:kong@kong-database:5432/konga&quot;</span><br></code></pre></td></tr></table></figure><h4 id="启动Konga"><a href="#启动Konga" class="headerlink" title="启动Konga"></a>启动Konga</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker run -d --name konga <span class="hljs-string">\</span><br>             --network kong-net <span class="hljs-string">\</span><br>             -e <span class="hljs-string">&quot;TOKEN_SECRET=secret123&quot;</span> <span class="hljs-string">\</span><br>             -e <span class="hljs-string">&quot;DB_ADAPTER=postgres&quot;</span> <span class="hljs-string">\</span><br>             -e <span class="hljs-string">&quot;DB_URI=postgres://kong:kong@kong-database:5432/konga&quot;</span> <span class="hljs-string">\</span><br>             -e <span class="hljs-string">&quot;NODE_ENV=development&quot;</span> <span class="hljs-string">\</span><br>             -p <span class="hljs-number">1337</span>:<span class="hljs-number">1337</span> <span class="hljs-string">\</span><br>             pantsel/konga<br></code></pre></td></tr></table></figure><h4 id="使用Konga"><a href="#使用Konga" class="headerlink" title="使用Konga"></a>使用Konga</h4><p>访问<a href="http://localhost:1337/">http://localhost:1337</a> 来访问Konga：</p><p><img src="https://uss.ilovey.live/img/posts/konga-weicome.png"></p><p>在Konga上配置<br>注册admin用户<br>初次使用Konga前，需要先注册一个Admin用户。</p><p>配置Kong连接<br>在Konga上，打开Connections，选择新建一个Kong连接<br>然<br>选择连接类型为key Auth，输入连接名称、Loopback API URL和API Key。</p><p>更多内容可以参考官方资料：<a href="https://docs.konghq.com/">https://docs.konghq.com</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Docker</tag>
      
      <tag>Linux</tag>
      
      <tag>Kong</tag>
      
      <tag>Konga</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx-config 常用配置，避坑记录</title>
    <link href="/2021/09/09/nginx-config/"/>
    <url>/2021/09/09/nginx-config/</url>
    
    <content type="html"><![CDATA[<h3 id="Nginx常用配置，避坑记录"><a href="#Nginx常用配置，避坑记录" class="headerlink" title="Nginx常用配置，避坑记录"></a>Nginx常用配置，避坑记录</h3><h4 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 更新软件包，请确保服务器的软件包已经是最新的。</span><br>sudo yum update -y<br><br><span class="hljs-comment"># 添加 Nginx 源</span><br>sudo rpm -Uvh http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/packages/</span>centos<span class="hljs-regexp">/7/</span>noarch<span class="hljs-regexp">/RPMS/</span>nginx-release-centos-<span class="hljs-number">7</span>-<span class="hljs-number">0</span>.el7.ngx.noarch.rpm<br><br><span class="hljs-comment"># 安装 Nginx</span><br>sudo yum install -y nginx<br><br><span class="hljs-comment"># 启动 Nginx</span><br>sudo systemctl start nginx.service<br><br><span class="hljs-comment"># 设置开机自启 Nginx</span><br>sudo systemctl enable nginx.service<br></code></pre></td></tr></table></figure><h4 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 使用 vim 编辑创建 文件名.conf</span><br>vim <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span>文件名.conf<br><br>添加配置<span class="hljs-number">1</span>（配置<span class="hljs-number">1</span>和<span class="hljs-number">2</span>可以同事监听<span class="hljs-number">80</span>端口，绑定不同域名，实现一台服务器nginx同时配置多个前端网站，多个域名空格隔开）<br>server &#123;<br>    listen <span class="hljs-number">80</span>;<br>    server_name 域名<span class="hljs-number">1</span> 域名<span class="hljs-number">2</span> localhost;<br><br>    location / &#123;<br>        proxy_set_header HOST <span class="hljs-variable">$host</span>;<br>        proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>        proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:端口/;<br>    &#125;<br>&#125;<br><br>添加配置<span class="hljs-number">2</span><br>server &#123;<br>    listen <span class="hljs-number">80</span>;<br>    server_name 域名<span class="hljs-number">1</span> 域名<span class="hljs-number">2</span> localhost;<br><br>    location / &#123;<br>        proxy_set_header HOST <span class="hljs-variable">$host</span>;<br>        proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>        proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:端口/;<br>    &#125;<br><br>&#125;<br><br>代理静态网站 root指定磁盘目录<br>server &#123;<br>    listen       <span class="hljs-number">80</span>;<br>    server_name  域名<span class="hljs-number">1</span> 域名<span class="hljs-number">2</span> 多个域名空格隔开 localhost;<br>    location / &#123;<br>       try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.html;<br>       root D:\test-web;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">检查配置是否有误<br>sudo nginx -t<br><br>重载/重启 Nginx 配置<br>sudo nginx -s reload<br><br>查看nginx安装目录<br><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> nginx<br></code></pre></td></tr></table></figure><h4 id="错误及解决办法"><a href="#错误及解决办法" class="headerlink" title="错误及解决办法"></a>错误及解决办法</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">不能访问子路径错误：<br>location /flow &#123;<br>    proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9083</span>/;<br>&#125;<br>修改：<br>location <span class="hljs-regexp">/flow/</span> &#123;<br>    proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9083</span>/;<br>&#125;<br>解决：<span class="hljs-regexp">/flow 后面加个/</span><br><br>配置多个前端代码<span class="hljs-regexp">/a/</span> <span class="hljs-regexp">/b/</span>不能访问<br>解决：把<span class="hljs-regexp">/a/</span> <span class="hljs-regexp">/b/</span>放在根目录下面 （就是只有一个根目录，不过根目录里面可以放很多项目文件夹）<br><br>去掉请求后面的斜杠 添加在location节点里面 解决浏览器请求拼接到接口前面的诡异问题<br>rewrite ^<span class="hljs-regexp">/(.*)/</span>$ /<span class="hljs-variable">$1</span> permanent;<br><br></code></pre></td></tr></table></figure><h4 id="前后端分离项目部署"><a href="#前后端分离项目部署" class="headerlink" title="前后端分离项目部署"></a>前后端分离项目部署</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">##前端配置</span><br>location /gov_flow &#123;<br>                <span class="hljs-comment">##放再nginx下的/content/gov_flow目录</span><br>                alias <span class="hljs-regexp">/var/</span>html/gov_flow;<br>                try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.html;<br>                index index.html;<br>        &#125;<br>        <br><span class="hljs-comment">##后端接口配置            </span><br>location <span class="hljs-regexp">/stage-prod-api/</span> &#123;<br>            proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>            proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            proxy_set_header REMOTE-HOST <span class="hljs-variable">$remote_addr</span>;<br>            proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            proxy_pass http:<span class="hljs-regexp">//</span>flow:<span class="hljs-number">9083</span>/;<br>    &#125;<br>location <span class="hljs-regexp">/stage-test-api/</span>&#123;<br>        proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header REMOTE-HOST <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        proxy_pass http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span>/;<br>&#125;<br>    <br><span class="hljs-comment">#两个后端项目接口合并成一个 给前端访问9991</span><br>server &#123;<br>    listen       <span class="hljs-number">9991</span>;<br>    server_name  localhost;<br>    location <span class="hljs-regexp">/yqt/</span>&#123;<br>        proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8888</span><span class="hljs-regexp">/yqt/</span>;<br>    &#125;<br><br>    location <span class="hljs-regexp">/ad/</span>&#123;<br>        proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8090</span><span class="hljs-regexp">/ad/</span>;<br>    &#125;<br>&#125;   <br></code></pre></td></tr></table></figure><h4 id="nginx配置ssl证书示例1"><a href="#nginx配置ssl证书示例1" class="headerlink" title="nginx配置ssl证书示例1"></a>nginx配置ssl证书示例1</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs awk">http&#123;<br><span class="hljs-comment">#http节点中可以添加多个server节点</span><br>server&#123;<br>    <span class="hljs-comment">#ssl 需要监听443端口</span><br>    listen <span class="hljs-number">443</span>;<br>    <span class="hljs-comment"># CA证书对应的域名</span><br>    server_name www.ilovey.live;<br>    <span class="hljs-comment"># 开启ssl</span><br>    ssl on;<br>    <span class="hljs-comment"># 服务器证书绝对路径</span><br>    ssl_certificate <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/nginx/</span>conf.d/<span class="hljs-number">4467149</span>_www.ilovey.live.pem;<br>    <span class="hljs-comment"># 服务器端证书key绝对路径 </span><br>    ssl_certificate_key <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/nginx/</span>conf.d/<span class="hljs-number">4467149</span>_www.ilovey.live.key;<br>    <span class="hljs-comment"># session超时</span><br>    ssl_session_timeout <span class="hljs-number">5</span>m;<br>    <span class="hljs-comment"># 协议类型</span><br>    ssl_protocols TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br>    <span class="hljs-comment"># ssl算法列表 </span><br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>    <span class="hljs-comment">#  是否 服务器决定使用哪种算法  on/off   TLSv1.1 的话需要开启</span><br>    ssl_prefer_server_ciphers on;<br>    <br>    location ^~  <span class="hljs-regexp">/zhihao/</span> &#123;<br>        proxy_set_header Host <span class="hljs-variable">$host</span>;<br>        proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span>/;<br>    &#125;<br>&#125;<br><span class="hljs-comment"># 如果用户通过 http 访问 直接重写 跳转到 https 这个是一个很有必要的操作</span><br>server&#123;<br>    listen <span class="hljs-number">80</span>;<br>    server_name www.ilovey.live;<br>    rewrite ^<span class="hljs-regexp">/(.*)$ https:/</span><span class="hljs-regexp">/www.ilovey.live:443/</span><span class="hljs-variable">$1</span> permanent;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="nginx配置ssl证书示例2"><a href="#nginx配置ssl证书示例2" class="headerlink" title="nginx配置ssl证书示例2"></a>nginx配置ssl证书示例2</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span><br>&#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;<br><span class="hljs-attribute">server_name</span> ilovey.live;<br><span class="hljs-attribute">index</span> index.php index.html index.htm default.php default.htm default.html;<br><span class="hljs-attribute">root</span> /www/wwwroot/网站目录;<br><br><span class="hljs-comment">#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span><br><span class="hljs-comment">#error_page 404/404.html;</span><br><span class="hljs-attribute">ssl_certificate</span>    /www/server/nginx/conf.d/4467149_www.ilovey.live.pem;<br><span class="hljs-attribute">ssl_certificate_key</span>    /www/server/nginx/conf.d/4467149_www.ilovey.live.key;<br><span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br><span class="hljs-attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br><span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">10m</span>;<br><span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">10m</span>;<br><span class="hljs-attribute">error_page</span> <span class="hljs-number">497</span>  https://$host$request_uri;<br><br><br><span class="hljs-comment">#SSL-END</span><br><br><span class="hljs-comment">#ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span><br><span class="hljs-comment">#error_page 404 /404.html;</span><br><span class="hljs-comment">#error_page 502 /502.html;</span><br><span class="hljs-comment">#ERROR-PAGE-END</span><br><br><span class="hljs-comment">#PHP-INFO-START  PHP引用配置，可以注释或修改</span><br><br><span class="hljs-comment">#PROXY-START</span><br><span class="hljs-attribute">location</span> /<br>&#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://localhost:8886;<br>    <span class="hljs-attribute">proxy_set_header</span> Host $host;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP $remote_addr;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;<br>    <span class="hljs-attribute">proxy_set_header</span> REMOTE-HOST $remote_addr;<br><br>    <span class="hljs-comment">#持久化连接相关配置</span><br>    <span class="hljs-comment">#proxy_connect_timeout 30s;</span><br>    <span class="hljs-comment">#proxy_read_timeout 86400s;</span><br>    <span class="hljs-comment">#proxy_send_timeout 30s;</span><br>    <span class="hljs-comment">#proxy_http_version 1.1;</span><br>    <span class="hljs-comment">#proxy_set_header Upgrade $http_upgrade;</span><br>    <span class="hljs-comment">#proxy_set_header Connection &quot;upgrade&quot;;</span><br>    <span class="hljs-comment">##expires 12h;</span><br>&#125;<br><br><span class="hljs-comment">#PHP-INFO-END</span><br><br><br><br><span class="hljs-comment">#禁止访问的文件或目录</span><br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span><br>&#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">404</span>;<br>&#125;<br><br><span class="hljs-comment">#一键申请SSL证书验证目录相关设置</span><br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.well-known</span>&#123;<br>    <span class="hljs-attribute">allow</span> all;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Linux</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建ELK日志分析平台</title>
    <link href="/2021/09/08/ELK/"/>
    <url>/2021/09/08/ELK/</url>
    
    <content type="html"><![CDATA[<p>使用资料</p><blockquote><ul><li>开源项目 <a href="https://github.com/deviantony/docker-elk.git">https://github.com/deviantony/docker-elk.git</a></li></ul></blockquote><p>目标主机设定</p><blockquote><ul><li>Docker Engine版本17.05+</li><li>Docker Compose版本1.12.0+</li><li>1.5 GB的RAM</li></ul></blockquote><p>默认端口号</p><blockquote><ul><li>5000: Logstash TCP input</li><li>9200: Elasticsearch HTTP</li><li>9300: Elasticsearch TCP transport</li><li>5601: Kibana</li></ul></blockquote><h3 id="一、安装-Docker-Engine"><a href="#一、安装-Docker-Engine" class="headerlink" title="一、安装 Docker Engine"></a>一、安装 Docker Engine</h3><p>因为我服务器没有docker engine，所以我要先安装docker engine</p><h4 id="1-设置仓库"><a href="#1-设置仓库" class="headerlink" title="1.设置仓库"></a>1.设置仓库</h4><p>使用 Docker 仓库进行安装<br>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p><p>安装所需的软件包</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell">$ sudo yum install -y yum-utils \<br>  device-mapper-persistent-<span class="hljs-class"><span class="hljs-keyword">data</span> \</span><br>  lvm2<br></code></pre></td></tr></table></figure><p>使用以下命令来设置稳定的仓库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo yum-config-manager \<br>    --add-repo \<br>    https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h4 id="2-安装-Docker-Engine-Community"><a href="#2-安装-Docker-Engine-Community" class="headerlink" title="2.安装 Docker Engine-Community"></a>2.安装 Docker Engine-Community</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ sudo yum install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io<br></code></pre></td></tr></table></figure><p>安装特定版本的 Docker Engine-Community，在存储库中列出可用版本：<br> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"> $ yum <span class="hljs-keyword">list</span> docker-<span class="hljs-keyword">ce</span> --showduplicates | <span class="hljs-keyword">sort</span> -r<br> <br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">3</span>:<span class="hljs-number">18.09</span>.<span class="hljs-number">1</span>-<span class="hljs-number">3</span>.el7                     docker-<span class="hljs-keyword">ce</span>-stable<br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">3</span>:<span class="hljs-number">18.09</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el7                     docker-<span class="hljs-keyword">ce</span>-stable<br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">18.06</span>.<span class="hljs-number">1</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">3</span>.el7                    docker-<span class="hljs-keyword">ce</span>-stable<br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">18.06</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">3</span>.el7                    docker-<span class="hljs-keyword">ce</span>-stable<br></code></pre></td></tr></table></figure><br> 通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：docker-ce-18.09.1。<br> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ sudo yum install docker-<span class="hljs-keyword">ce</span>-<span class="hljs-symbol">&lt;VERSION_STRING&gt;</span> docker-<span class="hljs-keyword">ce</span>-cli-<span class="hljs-symbol">&lt;VERSION_STRING&gt;</span> containerd.io<br></code></pre></td></tr></table></figure></p><h4 id="3-启动-Docker。"><a href="#3-启动-Docker。" class="headerlink" title="3.启动 Docker。"></a>3.启动 Docker。</h4> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> sudo systemctl <span class="hljs-built_in">start</span> docker<br></code></pre></td></tr></table></figure><h4 id="4-安装依赖："><a href="#4-安装依赖：" class="headerlink" title="4.安装依赖："></a>4.安装依赖：</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ yum <span class="hljs-keyword">install</span> libseccomp-devel<br></code></pre></td></tr></table></figure><h4 id="5-运行docker-hello-world-测试安装结果"><a href="#5-运行docker-hello-world-测试安装结果" class="headerlink" title="5.运行docker hello-world 测试安装结果"></a>5.运行docker hello-world 测试安装结果</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo docker <span class="hljs-builtin-name">run</span> hello-world<br></code></pre></td></tr></table></figure><h3 id="二、安装Docker-Compose"><a href="#二、安装Docker-Compose" class="headerlink" title="二、安装Docker Compose"></a>二、安装Docker Compose</h3><p>因为我服务器没有docker compose，所以我要先安装docker compose</p><h4 id="1-下载-Docker-Compose-的当前稳定版本"><a href="#1-下载-Docker-Compose-的当前稳定版本" class="headerlink" title="1.下载 Docker Compose 的当前稳定版本"></a>1.下载 Docker Compose 的当前稳定版本</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><h4 id="2-将可执行权限应用于二进制文件"><a href="#2-将可执行权限应用于二进制文件" class="headerlink" title="2.将可执行权限应用于二进制文件"></a>2.将可执行权限应用于二进制文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><h4 id="3-创建软链："><a href="#3-创建软链：" class="headerlink" title="3.创建软链："></a>3.创建软链：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose <span class="hljs-regexp">/usr/</span>bin/docker-compose<br></code></pre></td></tr></table></figure><h4 id="4-测试是否安装成功："><a href="#4-测试是否安装成功：" class="headerlink" title="4.测试是否安装成功："></a>4.测试是否安装成功：</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ docker-compose <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><blockquote><p>遇到问题，原因，解决方案</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">a.报错：运行docker-compose --version出现：<br><br>Cannot open self <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose or archive <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose.pkg<br><br><br>b.原因：使用官方文档中所描述的方法：<br><br>curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.14.0-rc2/</span>docker-compose-`uname -s`-`uname -m` <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br>chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br>安装时，curl下载下来的文件是不完整的<br><br>c.解决方法：<br><br>手动下载：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.14.0-rc2/</span>docker-compose-Linux-x86_64<br>然后将文件上传到 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span> 文件夹下，然后将其重命名为docker-compose，修改此文件的权限，增加可执行：<br><br>chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br><br>然后再运行$ docker-compose --version 即可<br></code></pre></td></tr></table></figure><h3 id="三、安装Git"><a href="#三、安装Git" class="headerlink" title="三、安装Git"></a>三、安装Git</h3><p>因为我服务器没有git，所以我要先安装git</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> yum install <span class="hljs-built_in">curl</span><span class="hljs-literal">-devel</span> expat<span class="hljs-literal">-devel</span> gettext<span class="hljs-literal">-devel</span> \<br>  openssl<span class="hljs-literal">-devel</span> zlib<span class="hljs-literal">-devel</span><br><br><span class="hljs-variable">$</span> yum <span class="hljs-literal">-y</span> install git<span class="hljs-literal">-core</span><br><br><span class="hljs-variable">$</span> git -<span class="hljs-literal">-version</span><br></code></pre></td></tr></table></figure><h3 id="四、用Docker上安装ELK"><a href="#四、用Docker上安装ELK" class="headerlink" title="四、用Docker上安装ELK"></a>四、用Docker上安装ELK</h3><h4 id="1-创建一个目录"><a href="#1-创建一个目录" class="headerlink" title="1.创建一个目录"></a>1.创建一个目录</h4><p>个人习惯，随意</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir elk<br></code></pre></td></tr></table></figure><h4 id="2-git命令拉取部署elk所需资料"><a href="#2-git命令拉取部署elk所需资料" class="headerlink" title="2.git命令拉取部署elk所需资料"></a>2.git命令拉取部署elk所需资料</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/deviantony/</span>docker-elk.git<br></code></pre></td></tr></table></figure><h4 id="3-进入刚下载的文件夹内"><a href="#3-进入刚下载的文件夹内" class="headerlink" title="3.进入刚下载的文件夹内"></a>3.进入刚下载的文件夹内</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> docker<span class="hljs-literal">-elk</span><br></code></pre></td></tr></table></figure><h4 id="4-通过docker-compose创建并启动容器"><a href="#4-通过docker-compose创建并启动容器" class="headerlink" title="4.通过docker-compose创建并启动容器"></a>4.通过docker-compose创建并启动容器</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>docker-compose up -d<br></code></pre></td></tr></table></figure><h4 id="5-通过docker-ps可以看到logstash、elasticsearch、kibana容器已经创建并且启动。"><a href="#5-通过docker-ps可以看到logstash、elasticsearch、kibana容器已经创建并且启动。" class="headerlink" title="5.通过docker ps可以看到logstash、elasticsearch、kibana容器已经创建并且启动。"></a>5.通过docker ps可以看到logstash、elasticsearch、kibana容器已经创建并且启动。</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span><br></code></pre></td></tr></table></figure><h4 id="6-关于elasticsearch、logstash、kibana的配置都在对应目录下的config文件夹中的-yml文件中"><a href="#6-关于elasticsearch、logstash、kibana的配置都在对应目录下的config文件夹中的-yml文件中" class="headerlink" title="6.关于elasticsearch、logstash、kibana的配置都在对应目录下的config文件夹中的.yml文件中"></a>6.关于elasticsearch、logstash、kibana的配置都在对应目录下的config文件夹中的.yml文件中</h4>]]></content>
    
    
    
    <tags>
      
      <tag>开源</tag>
      
      <tag>后端</tag>
      
      <tag>ELK</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Alibaba Cloud Toolkit使用IntelliJ IDEA部署应用到Win服务器</title>
    <link href="/2021/08/17/article-init/"/>
    <url>/2021/08/17/article-init/</url>
    
    <content type="html"><![CDATA[<h3 id="安装需要的工具"><a href="#安装需要的工具" class="headerlink" title="安装需要的工具"></a>安装需要的工具</h3><p>部署linux服务器按照官方文档即可 <a href="https://help.aliyun.com/document_detail/98763.html">https://help.aliyun.com/document_detail/98763.html</a></p><p>教程是win服务器操作</p><h3 id="1-window服务器上安装OpenSSH"><a href="#1-window服务器上安装OpenSSH" class="headerlink" title="1.window服务器上安装OpenSSH"></a>1.window服务器上安装OpenSSH</h3><p><a href="https://github.com/PowerShell/Win32-OpenSSH/releases">https://github.com/PowerShell/Win32-OpenSSH/releases</a></p><p>解压目录下执行官网的步骤</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//a.安装命令</span><br>powershell.exe -ExecutionPolicy Bypass -<span class="hljs-built_in">File</span> install-sshd.ps1<br><br><span class="hljs-comment">//b.设置为自启动模式</span><br>sc config sshd start= <span class="hljs-keyword">auto</span><br><br><span class="hljs-comment">//c.启动服务</span><br>net start sshd<br></code></pre></td></tr></table></figure><h3 id="2-安装插件Alibaba-Cloud-Toolkit-配置"><a href="#2-安装插件Alibaba-Cloud-Toolkit-配置" class="headerlink" title="2.安装插件Alibaba Cloud Toolkit 配置"></a>2.安装插件Alibaba Cloud Toolkit 配置</h3><p>run.bat 脚本 项目端口-需替换，包名-需替换</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros">@echo off &amp; setlocal EnableDelayedExpansion<br> <br><span class="hljs-builtin-name">set</span> obj[0]=项目端口-需替换<br> <br> <br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">port</span>=0<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">pid</span>=0<br> <br><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;usebackq delims== tokens=1-2&quot;</span> %%a <span class="hljs-keyword">in</span> (`<span class="hljs-builtin-name">set</span> obj`) <span class="hljs-keyword">do</span> (<br>    <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">port</span>=%%b<br>    <span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;tokens=5&quot;</span> %%m <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;netstat -aon ^| findstr &quot;:%%b&quot;&#x27;</span>) <span class="hljs-keyword">do</span> (<br>        <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">pid</span>=%%m<br>    )<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;!pid!&quot;</span>==<span class="hljs-string">&quot;0&quot;</span> (<br>        echo 端口号【!port!】没有占用<br>    ) <span class="hljs-keyword">else</span> (<br>        echo 端口号【!port!】相关进程以杀死<br>        taskkill /f /pid !pid!<br>    )<br>    <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">pid</span>=0<br>)<br> <br>java -jar -Xms1024m -Xmx1536m -XX:<span class="hljs-attribute">PermSize</span>=128M -XX:<span class="hljs-attribute">MaxPermSize</span>=256M 包名-需替换.jar &amp;<br> <br>pause<br></code></pre></td></tr></table></figure><h3 id="3-执行注意事项"><a href="#3-执行注意事项" class="headerlink" title="3.执行注意事项"></a>3.执行注意事项</h3><p>问题：多模块工程打包出现找不到符号的问题<br>原因：聚合工程下的子工程必须依次执行 clean install，再具体模块package<br>解决：父模块clean install，具体子模块package</p><h3 id="4-操作截图…"><a href="#4-操作截图…" class="headerlink" title="4.操作截图…"></a>4.操作截图…</h3><p><img src="https://uss.ilovey.live/img/act/img1.png"><br><img src="https://uss.ilovey.live/img/act/img2.png"><br><img src="https://uss.ilovey.live/img/act/img3.png"><br><img src="https://uss.ilovey.live/img/act/img4.png"><br><img src="https://uss.ilovey.live/img/act/img5.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开源</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/08/05/hello-world/"/>
    <url>/2021/08/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>开源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🎨 Java 学习笔记</title>
    <link href="/2018/08/17/old-context/"/>
    <url>/2018/08/17/old-context/</url>
    
    <content type="html"><![CDATA[<p>🎨 Java 学习笔记</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ul><li><a href="https://github.com/java-aodeng/JavaGuide/blob/master/README.md">网上看到写得好的文章收集</a></li></ul><h3 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h3><ul><li><a href="https://gitbook.cn/gitchat/activity/5daac87dd39d6a72d183b52c?utm_source=weixinNotification">CI/CD流程以及原理说明</a></li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/design-pattern/design-pattern1">策略模式</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/design-pattern/design-pattern2">单例模式</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/design-pattern/design-pattern3">工厂模式</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/design-pattern/design-pattern4/learn/DecoratorMode.md">装饰器模式</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/design-pattern/design-pattern5/src/1.md">观察者模式</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/design-pattern/20190717/src/1.md">适配器模式</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/design-pattern/20190718/src/1.md">模板方法模式</a></li></ul><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><ul><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot1-public-pom">SpringBoot(1)：公共配置</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot2-generator">SpringBoot(2)：generator</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot3-docker">SpringBoot(3)：docker部署项目</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot4-file-upload">SpringBoot(4)：单一，base64文件上传</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot5-mapper-pagehelper">SpringBoot(5)：通用mapper，分页插件</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot6-redis-session">SpringBoot(6)：redis缓存数据，session</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot7-timed-task">SpringBoot(7)：定时任务</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot8-date-format">SpringBoot(8)：格式化日期</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot9-exception-manager">SpringBoot(9)：全局异常处理</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot10-email">SpringBoot(10)：JavaMailSender邮件服务</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot11-CommandLineRunner">SpringBoot(11)：CommandLineRunner-初始化资源</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot12-shiro-redis">SpringBoot(12)：redis保存session-shiro登录认证</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot13-starter-test">SpringBoot(13)：MockMVC-web单元测试</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot14-thymeleaf">SpringBoot(14)：Thymeleaf使用</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot15-quartz">SpringBoot(15)：集成 Quartz</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot16-rabbitmq">SpringBoot(16)：集成 rabbitmq</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot17-mybatis-plus">SpringBoot(17)：集成 mybatis-plus</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot18-jwt-shiro">SpringBoot(18)：整合jwt-shiro</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springboot/springboot19-redisson-distributed-locks">SpringBoot(19)：集成redisson实现分布式锁</a></li></ul><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><ul><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springcloud/micro-service1-eureka-server">SpringCloud(1)：服务注册中心server和服务客户端client</a> / <a href="https://github.com/java-aodeng/hope/tree/master/docs/micro-service1-eureka-client">Eureka client代码</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springcloud/micro-service2-eureka-provider">SpringCloud(2)：服务提供者provider</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springcloud/micro-service3-eureka-ribbon">SpringCloud(3)：服务消费者ribbon</a></li><li><a href="https://aodeng.cc/archives/khdfzjhs">SpringCloud(4)：客户端负载均衡</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springcloud/micro-service5-feign">SpringCloud(5)：服务消费者feign与Hystrix断路器容错机制</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/springcloud/micro-service6-hystrixdashboard">SpringCloud(6)：Hystrix Dashboard熔断监控面板</a></li></ul><h3 id="服务器运维-工具安装配置"><a href="#服务器运维-工具安装配置" class="headerlink" title="服务器运维-工具安装配置"></a>服务器运维-工具安装配置</h3><ul><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/ubuntu/es.md">Ubuntu下Elasticsearch安装配置</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/ubuntu/Elasticsearch-kibana.md">Ubuntu下搭建Elasticsearch和kibana</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/good-code/%E7%93%A6%E5%8A%9Bwalle2.0-docker%E5%AE%89%E8%A3%85.md">瓦力walle2.0-docker安装</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/Avoid-pit-notes-2021/Yapi%20%E5%86%85%E7%BD%91%E9%83%A8%E7%BD%B2-%E9%81%BF%E5%9D%91.md">Yapi 内网部署-避坑</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/Avoid-pit-notes-2021/win10%E5%AE%89%E8%A3%85mysql-%E9%81%BF%E5%9D%91%E7%AC%94%E8%AE%B02021.md">win10安装mysql-避坑</a></li></ul><h3 id="服务器运维-常用命令、常见问题"><a href="#服务器运维-常用命令、常见问题" class="headerlink" title="服务器运维-常用命令、常见问题"></a>服务器运维-常用命令、常见问题</h3><ul><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.md">Linux常用命令</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/linux/dos2unix.md">dos2unix的使用:对文件进行转换</a></li></ul><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/nginx/nginx1.md">Java 程序员应掌握的 Nginx 实战应用（一）</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/nginx/nginx2.md">Java 程序员应掌握的 Nginx 实战应用（二）</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/git/git1.md">Git常用命令</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/mvn.md">Maven常用（一）</a></li></ul><h3 id="Java-code"><a href="#Java-code" class="headerlink" title="Java code"></a>Java code</h3><ul><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/java/java1.md">Java常用方法（一）</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/json/json1.md">Json返回结果为null属性不显示解决</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/ie/ieExcel1.md">设置ie导出Excel乱码问题</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/Annotation/annotation1.md">常用注解（一）</a></li><li><a href="https://github.com/java-aodeng/hope/blob/master/docs/spring/spring1.md">Spring异步方法</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/good-code/%E5%A4%9A%E7%BA%A7%E8%8F%9C%E5%8D%95%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E6%88%90%E6%A0%91.md">多级菜单递归遍历成树</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/good-code/%E5%BE%AE%E4%BF%A1%E8%AE%A4%E8%AF%81.md">微信认证</a></li><li><a href="https://github.com/java-aodeng/hope/tree/master/docs/good-code/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95.md">雪花算法</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
